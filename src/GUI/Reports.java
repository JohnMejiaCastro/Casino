/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Casino.persistence.DBCasino;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import logic.DataDayReport;
import logic.Machine;
import logic.PDFReport;
import logic.Users;
import org.hsqldb.persist.Logger;

/**
 *
 * @author johnleandro
 */
public class Reports extends javax.swing.JFrame {
    private DBCasino dataFile;
    private final long MILS_DAY = 24 * 1000 * 60 * 60;
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String reportDayTitule = "REPORT DAY";
    String reportMonthTitule = "REPORT MONTH";

    public DBCasino getDataFile() {
        return dataFile;
    }

    public void setDataFile(DBCasino dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * Creates new form ReportMonth
     */
    public Reports() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("REPORTS");
        
    }

    public Reports(DBCasino dataFile) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("REPORTS");
        this.dataFile = dataFile;
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panDataUsers = new javax.swing.JPanel();
        labPhoto = new javax.swing.JLabel();
        labPokerland = new javax.swing.JLabel();
        panReportMonth = new javax.swing.JPanel();
        butSearch = new javax.swing.JButton();
        jDateBefore = new com.toedter.calendar.JDateChooser();
        jDateLast = new com.toedter.calendar.JDateChooser();
        butBack = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jDateDay = new com.toedter.calendar.JDateChooser();
        butSearch1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panDataUsers.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        labPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/admon.png"))); // NOI18N

        labPokerland.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/LETRAS.PNG"))); // NOI18N

        javax.swing.GroupLayout panDataUsersLayout = new javax.swing.GroupLayout(panDataUsers);
        panDataUsers.setLayout(panDataUsersLayout);
        panDataUsersLayout.setHorizontalGroup(
            panDataUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panDataUsersLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(labPokerland, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panDataUsersLayout.setVerticalGroup(
            panDataUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panDataUsersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labPokerland, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panReportMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Report Month"));

        butSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/search.png"))); // NOI18N
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panReportMonthLayout = new javax.swing.GroupLayout(panReportMonth);
        panReportMonth.setLayout(panReportMonthLayout);
        panReportMonthLayout.setHorizontalGroup(
            panReportMonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panReportMonthLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jDateLast, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateBefore, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(butSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        panReportMonthLayout.setVerticalGroup(
            panReportMonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panReportMonthLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panReportMonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateBefore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        butBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        butBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/back.PNG"))); // NOI18N
        butBack.setText("Back Menu");
        butBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBackActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Report Day"));

        butSearch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/search.png"))); // NOI18N
        butSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearch1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(butSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(panDataUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(butBack, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panReportMonth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panDataUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panReportMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(butBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBackActionPerformed
        MenuManager Wconnect = new MenuManager(this.getDataFile());
        Wconnect.setVisible(true);
        dispose();
    }//GEN-LAST:event_butBackActionPerformed


    private void butSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearch1ActionPerformed
        this.selectReportDay();
    }//GEN-LAST:event_butSearch1ActionPerformed

    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        this.selectReportDates();
    }//GEN-LAST:event_butSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBack;
    private javax.swing.JButton butSearch;
    private javax.swing.JButton butSearch1;
    private com.toedter.calendar.JDateChooser jDateBefore;
    private com.toedter.calendar.JDateChooser jDateDay;
    private com.toedter.calendar.JDateChooser jDateLast;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labPhoto;
    private javax.swing.JLabel labPokerland;
    private javax.swing.JPanel panDataUsers;
    private javax.swing.JPanel panReportMonth;
    // End of variables declaration//GEN-END:variables

    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newInterface();
        }
    }

    private void newInterface() {

        jDateDay.setDate(new Date());
        jDateLast.setDate(new Date());
        jDateBefore.setDate(new Date());
    }

    

    /**
     * Obtain a machine list from DB (machine table)
     * @return Machine list
     */
    private List<Machine> getListMachine() {
        List<Machine> listMachine = new ArrayList<>();

        String query = "SELECT numberMachine, BetValue FROM machine";
        if (this.getDataFile().execute(query)) {
            try {
                if (this.getDataFile().getResultSet() != null) {
                    while (this.getDataFile().getResultSet().next()) {
                        Machine machine = new Machine();
                        machine.setNumberMachine(this.getDataFile().getResultSet().getInt("numberMachine"));
                        machine.setBetValue(this.getDataFile().getResultSet().getInt("BetValue"));
                        listMachine.add(machine);
                    }
                }
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return listMachine;
    }

    /**
     * Obtain a machine report list from DB (DataReportDay table)
     * @param machine Machine data
     * @param startDate Inital date
     * @param endDate Final date
     * @return Machine report list
     */
    private List<DataDayReport> getListReport() {
        List<DataDayReport> listReport = new ArrayList<>();
        String query = "SELECT * FROM dateDayReport";
        if (this.getDataFile().execute(query)) {
            try {
                if (this.getDataFile().getResultSet() != null) {
                    while (this.getDataFile().getResultSet().next()) {
                        DataDayReport report = new DataDayReport();
                        report.setDayDate(this.getDataFile().getResultSet().getDate("dayDate"));
                        report.setNumberMachine(this.getDataFile().getResultSet().getInt("numberMachine"));
                        report.setMachineInputDayCurrent(this.getDataFile().getResultSet().getLong("machineInputDayCurrent"));
                        report.setMachineOutDayCurrent(this.getDataFile().getResultSet().getLong("machineOutDayCurrent"));
                        listReport.add(report);
                    }
                }
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return listReport;
    }

    private void pdfHeader(Document doc, String pdfFilename, String author, String appName, String companyName) {
        try {
            Paragraph header;
            PdfWriter.getInstance(doc, new FileOutputStream(pdfFilename));
            
            doc.addAuthor(author);
            doc.addCreationDate();
            doc.addProducer();
            doc.addCreator(appName);
            doc.addTitle(reportDayTitule);
            doc.setPageSize(PageSize.LETTER);
            
            doc.open();
            
            header = new Paragraph(new Date().toString(),
                    FontFactory.getFont(FontFactory.COURIER, 8, Font.NORMAL));
            header.setAlignment(Element.ALIGN_RIGHT);
            doc.add(header);
            header = new Paragraph(companyName,
                    FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLD));
            header.setAlignment(Element.ALIGN_RIGHT);            
            doc.add(header);
            header = new Paragraph(reportDayTitule,
                    FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLD));
            header.setAlignment(Element.ALIGN_CENTER);
            doc.add(header);
            
            header= new Paragraph ("");
            doc.add(header);
        } catch (DocumentException | FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * Select Report Day
     */
    private void selectReportDay() {     
        String fields[] = {"idMachine",
            "todayInCounter", 
            "yesterdayInCounter",
            "inCounter",
            "todayOutCounter",
            "yesterdayOutCounter",
            "outCounter",
            "result"};
        Document doc  =  new Document();
        PDFReport pdfReport = new PDFReport();
        Font hBold8 = new Font (Font.FontFamily.HELVETICA, 8, Font.BOLD, BaseColor.WHITE);
        Font h8 = new Font(Font.FontFamily.HELVETICA,  8);
        String pdfFilename = new Date().toString() + " reportDay.pdf";

        this.pdfHeader(
                doc,
                " reportDay.pdf",
                "Bats Developers", 
                "Casino App", 
                "Casino PokerLand");

        PdfPTable table = new PdfPTable(8);
        table.setWidthPercentage(99f);
        for (String field : fields) {
            pdfReport.insertPDFCell(table, field, Element.ALIGN_CENTER, 1, hBold8, BaseColor.BLACK);
        }
        table.setHeaderRows(1);

        try {
            List<Machine> machineList = this.getListMachine();
            List<DataDayReport> reportList = this.getListReport();
            Date diaAnterior = jDateDay.getDate();
            diaAnterior.setTime(diaAnterior.getTime() - this.MILS_DAY);
            
            for (Machine machine : machineList) {
                long todayInCounter = 0;
                long yesterdayInCounter = 0;
                long todayOutCounter = 0;
                long yesterdayOutCounter = 0;

                for (DataDayReport report : reportList) {
                    if (machine.getNumberMachine() == report.getNumberMachine()) {
                        if (report.getDayDate().equals(jDateDay.getDate())) {
                            todayInCounter = report.getMachineInputDayCurrent();
                            todayOutCounter = report.getMachineOutDayCurrent();
                        }
                        if (report.getDayDate().equals(diaAnterior)) {
                            yesterdayInCounter = report.getMachineInputDayCurrent();
                            yesterdayOutCounter = report.getMachineOutDayCurrent();
                        }
                    }
                }

                long inCounter = todayInCounter - yesterdayInCounter;
                long outCounter = todayOutCounter - yesterdayOutCounter;
                long result = (inCounter - outCounter) * machine.getBetValue();
                
                NumberFormat formatMoney = NumberFormat.getCurrencyInstance();
                   
                pdfReport.insertPDFCell(table, 
                        "" + machine.getNumberMachine(), 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + todayInCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + yesterdayInCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + inCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + todayOutCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + yesterdayOutCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + outCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + formatMoney.format(result), 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
            }
            Paragraph header;
             header = new Paragraph(" ");
             header = new Paragraph(" ");
             header = new Paragraph(" ");
             doc.add(header);
            doc.add(table);
            
            header = new Paragraph(" ");
            header = new Paragraph("IN THE RESULT THE ( ) MEAN LOSS OF MONEY",
            FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD));
            header.setAlignment(Element.ALIGN_LEFT);
            doc.add(header);
            doc.close();
            
            File path = new File(" reportDay.pdf");
            Desktop.getDesktop().open(path);
        } catch (DocumentException | IOException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    
    
    
    
    private void pdfHeaderReportDates(Document doc, String pdfFilename, String author, String appName, String companyName) {
        try {
            Paragraph header2;
            PdfWriter.getInstance(doc, new FileOutputStream(pdfFilename));
            
            doc.addAuthor(author);
            doc.addCreationDate();
            doc.addProducer();
            doc.addCreator(appName);
            doc.addTitle(reportMonthTitule);
            doc.setPageSize(PageSize.LETTER);
            
            doc.open();
            
            header2 = new Paragraph(new Date().toString(),
                    FontFactory.getFont(FontFactory.COURIER, 8, Font.NORMAL));
            header2.setAlignment(Element.ALIGN_RIGHT);
            doc.add(header2);
            header2 = new Paragraph(companyName,
                    FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLD));
            header2.setAlignment(Element.ALIGN_RIGHT);            
            doc.add(header2);
            header2 = new Paragraph(reportMonthTitule,
                    FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLD));
            header2.setAlignment(Element.ALIGN_CENTER);
            
            doc.add(header2);
            
            header2= new Paragraph ("");
            
           
            doc.add(header2);
        } catch (DocumentException | FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void selectReportDates() {
        
        String fields[] = {"Machine",
            "Curret Date In", 
            "Earlier Date In",
            "Subtraction In",
            "Current Date Out",
            "Earlier Date Out",
            "Subtraction Out",
            "Result"};
        Document doc  =  new Document();
        PDFReport pdfReport = new PDFReport();
        Font hBold8 = new Font (Font.FontFamily.HELVETICA, 8, Font.BOLD, BaseColor.WHITE);
        Font h8 = new Font(Font.FontFamily.HELVETICA,  8);
        

        this.pdfHeaderReportDates(
                doc,
                "reportDates.pdf",
                "Bats Developers", 
                "Casino App", 
                "Casino PokerLand");

        PdfPTable table = new PdfPTable(8);
        table.setWidthPercentage(95f);
        for (String field : fields) {
            pdfReport.insertPDFCell(table, field, Element.ALIGN_CENTER, 1, hBold8, BaseColor.BLACK);
        }
        table.setHeaderRows(1);

         try {
            List<Machine> machineList = this.getListMachine();
            List<DataDayReport> reportList = this.getListReport();
            Date diaAnterior =  jDateBefore.getDate();
            
            for (Machine machine : machineList) {
                long todayInCounter = 0;
                long yesterdayInCounter = 0;
                long todayOutCounter = 0;
                long yesterdayOutCounter = 0;

                for (DataDayReport report : reportList) {
                    if (machine.getNumberMachine() == report.getNumberMachine()) {
                        if (dateFormat.format(report.getDayDate()).equals(dateFormat.format(jDateBefore.getDate()))) {
                            todayInCounter = report.getMachineInputDayCurrent();
                            todayOutCounter = report.getMachineOutDayCurrent();
                        }
                        if (dateFormat.format(report.getDayDate()).equals(dateFormat.format(jDateLast.getDate()))) {
                            yesterdayInCounter = report.getMachineInputDayCurrent();
                            yesterdayOutCounter = report.getMachineOutDayCurrent();
                        }
                    }
                }

                long inCounter = todayInCounter - yesterdayInCounter;
                long outCounter = todayOutCounter - yesterdayOutCounter;
                long result = (inCounter - outCounter) * machine.getBetValue();
                
                NumberFormat formatMoney = NumberFormat.getCurrencyInstance();
                   
                pdfReport.insertPDFCell(table, 
                        "" + machine.getNumberMachine(), 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" +   todayInCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + yesterdayInCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + inCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + todayOutCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" +  yesterdayOutCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                pdfReport.insertPDFCell(table, 
                        "" + outCounter, 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
                // Courrency format - to do
                pdfReport.insertPDFCell(table, 
                        "" + formatMoney.format(result), 
                        Element.ALIGN_CENTER, 1, h8, BaseColor.WHITE);
            }        
             
            Paragraph header2;
            header2 = new Paragraph(" ");
            header2 = new Paragraph(" ");
            header2 = new Paragraph(" ");
             header2 = new Paragraph(" ");
            header2 = new Paragraph(" "); 
            doc.add(header2);
            
            doc.add(table);
            
            doc.close();
            
            File path = new File(" reportDates.pdf");
            Desktop.getDesktop().open(path);
        } catch (DocumentException | IOException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
